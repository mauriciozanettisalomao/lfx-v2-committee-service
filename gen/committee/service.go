// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee service
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package committee

import (
	"context"

	"goa.design/goa/v3/security"
)

// Committee management service
type Service interface {
	// Create Committee
	CreateCommittee(context.Context, *CreateCommitteePayload) (res *Committee, err error)
	// Get Committee
	GetCommittee(context.Context, *GetCommitteePayload) (res *GetCommitteeResult, err error)
	// Update Committee
	UpdateCommittee(context.Context, *UpdateCommitteePayload) (res *Committee, err error)
	// Delete Committee
	DeleteCommittee(context.Context, *DeleteCommitteePayload) (err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "committee"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "committee"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"create-committee", "get-committee", "update-committee", "delete-committee", "readyz", "livez"}

// Committee is the result type of the committee service create-committee
// method.
type Committee struct {
	// The unique identifier of the committee
	ID *string
	// The project identifier this committee belongs to
	ProjectID *string
	// The name of the committee
	Name *string
	// The category of the committee
	Category *string
	// The description of the committee
	Description *string
	// The website URL of the committee
	Website *string
	// Whether voting is enabled for this committee
	EnableVoting bool
	// Whether business email is required for committee members
	BusinessEmailRequired bool
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool
	// The name of the SSO group
	SsoGroupName *string
	// Whether audit logging is enabled for this committee
	IsAuditEnabled bool
	// Whether the committee is publicly visible
	Public bool
	// The public display name of the committee
	PublicName *string
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string
	// The current status of the committee
	Status string
	// Manager user IDs who can edit/modify this committee
	Writers []string
}

// CreateCommitteePayload is the payload type of the committee service
// create-committee method.
type CreateCommitteePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The name of the committee
	Name string
	// The category of the committee
	Category string
	// The description of the committee
	Description *string
	// The website URL of the committee
	Website *string
	// Whether voting is enabled for this committee
	EnableVoting bool
	// Whether business email is required for committee members
	BusinessEmailRequired bool
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool
	// The name of the SSO group
	SsoGroupName *string
	// Whether audit logging is enabled for this committee
	IsAuditEnabled bool
	// Whether the committee is publicly visible
	Public bool
	// The public display name of the committee
	PublicName *string
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string
	// The current status of the committee
	Status string
	// Manager user IDs who can edit/modify this committee
	Writers []string
}

// DeleteCommitteePayload is the payload type of the committee service
// delete-committee method.
type DeleteCommitteePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// ETag header value
	Etag *string
	// Committee ID
	ID *string
}

// GetCommitteePayload is the payload type of the committee service
// get-committee method.
type GetCommitteePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Committee ID
	ID *string
}

// GetCommitteeResult is the result type of the committee service get-committee
// method.
type GetCommitteeResult struct {
	Committee *Committee
	// ETag header value
	Etag *string
}

// UpdateCommitteePayload is the payload type of the committee service
// update-committee method.
type UpdateCommitteePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// Committee ID
	ID *string
	// The project identifier this committee belongs to
	ProjectID *string
	// The name of the committee
	Name string
	// The category of the committee
	Category string
	// The description of the committee
	Description *string
	// The website URL of the committee
	Website *string
	// Whether voting is enabled for this committee
	EnableVoting bool
	// Whether business email is required for committee members
	BusinessEmailRequired bool
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool
	// The name of the SSO group
	SsoGroupName *string
	// Whether audit logging is enabled for this committee
	IsAuditEnabled bool
	// Whether the committee is publicly visible
	Public bool
	// The public display name of the committee
	PublicName *string
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string
	// The current status of the committee
	Status string
	// Manager user IDs who can edit/modify this committee
	Writers []string
}

type BadRequestError struct {
	// Error message
	Message string
}

type ConflictError struct {
	// Error message
	Message string
}

type InternalServerError struct {
	// Error message
	Message string
}

type NotFoundError struct {
	// Error message
	Message string
}

type ServiceUnavailableError struct {
	// Error message
	Message string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "bad-request-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad-request-error".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "conflict-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "conflict-error".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "internal-server-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal-server-error".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "not-found-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not-found-error".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "service-unavailable-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service-unavailable-error".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
