// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee client
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package committee

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "committee" service client.
type Client struct {
	CreateCommitteeEndpoint goa.Endpoint
	GetCommitteeEndpoint    goa.Endpoint
	UpdateCommitteeEndpoint goa.Endpoint
	DeleteCommitteeEndpoint goa.Endpoint
	ReadyzEndpoint          goa.Endpoint
	LivezEndpoint           goa.Endpoint
}

// NewClient initializes a "committee" service client given the endpoints.
func NewClient(createCommittee, getCommittee, updateCommittee, deleteCommittee, readyz, livez goa.Endpoint) *Client {
	return &Client{
		CreateCommitteeEndpoint: createCommittee,
		GetCommitteeEndpoint:    getCommittee,
		UpdateCommitteeEndpoint: updateCommittee,
		DeleteCommitteeEndpoint: deleteCommittee,
		ReadyzEndpoint:          readyz,
		LivezEndpoint:           livez,
	}
}

// CreateCommittee calls the "create-committee" endpoint of the "committee"
// service.
// CreateCommittee may return the following errors:
//   - "BadRequest" (type *BadRequestError): Bad request
//   - "Conflict" (type *ConflictError): Conflict
//   - "InternalServerError" (type *InternalServerError): Internal server error
//   - "ServiceUnavailable" (type *ServiceUnavailableError): Service unavailable
//   - error: internal error
func (c *Client) CreateCommittee(ctx context.Context, p *CreateCommitteePayload) (res *Committee, err error) {
	var ires any
	ires, err = c.CreateCommitteeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Committee), nil
}

// GetCommittee calls the "get-committee" endpoint of the "committee" service.
// GetCommittee may return the following errors:
//   - "NotFound" (type *NotFoundError): Resource not found
//   - "InternalServerError" (type *InternalServerError): Internal server error
//   - "ServiceUnavailable" (type *ServiceUnavailableError): Service unavailable
//   - error: internal error
func (c *Client) GetCommittee(ctx context.Context, p *GetCommitteePayload) (res *GetCommitteeResult, err error) {
	var ires any
	ires, err = c.GetCommitteeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetCommitteeResult), nil
}

// UpdateCommittee calls the "update-committee" endpoint of the "committee"
// service.
// UpdateCommittee may return the following errors:
//   - "BadRequest" (type *BadRequestError): Bad request
//   - "NotFound" (type *NotFoundError): Resource not found
//   - "InternalServerError" (type *InternalServerError): Internal server error
//   - "ServiceUnavailable" (type *ServiceUnavailableError): Service unavailable
//   - error: internal error
func (c *Client) UpdateCommittee(ctx context.Context, p *UpdateCommitteePayload) (res *Committee, err error) {
	var ires any
	ires, err = c.UpdateCommitteeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Committee), nil
}

// DeleteCommittee calls the "delete-committee" endpoint of the "committee"
// service.
// DeleteCommittee may return the following errors:
//   - "BadRequest" (type *BadRequestError): Bad request
//   - "NotFound" (type *NotFoundError): Resource not found
//   - "InternalServerError" (type *InternalServerError): Internal server error
//   - "ServiceUnavailable" (type *ServiceUnavailableError): Service unavailable
//   - error: internal error
func (c *Client) DeleteCommittee(ctx context.Context, p *DeleteCommitteePayload) (err error) {
	_, err = c.DeleteCommitteeEndpoint(ctx, p)
	return
}

// Readyz calls the "readyz" endpoint of the "committee" service.
// Readyz may return the following errors:
//   - "ServiceUnavailable" (type *ServiceUnavailableError): Service unavailable
//   - error: internal error
func (c *Client) Readyz(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.ReadyzEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}

// Livez calls the "livez" endpoint of the "committee" service.
func (c *Client) Livez(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.LivezEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}
