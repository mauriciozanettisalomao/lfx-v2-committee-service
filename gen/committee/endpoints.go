// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee endpoints
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package committee

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "committee" service endpoints.
type Endpoints struct {
	CreateCommittee goa.Endpoint
	GetCommittee    goa.Endpoint
	UpdateCommittee goa.Endpoint
	DeleteCommittee goa.Endpoint
	Readyz          goa.Endpoint
	Livez           goa.Endpoint
}

// NewEndpoints wraps the methods of the "committee" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateCommittee: NewCreateCommitteeEndpoint(s, a.JWTAuth),
		GetCommittee:    NewGetCommitteeEndpoint(s, a.JWTAuth),
		UpdateCommittee: NewUpdateCommitteeEndpoint(s, a.JWTAuth),
		DeleteCommittee: NewDeleteCommitteeEndpoint(s, a.JWTAuth),
		Readyz:          NewReadyzEndpoint(s),
		Livez:           NewLivezEndpoint(s),
	}
}

// Use applies the given middleware to all the "committee" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateCommittee = m(e.CreateCommittee)
	e.GetCommittee = m(e.GetCommittee)
	e.UpdateCommittee = m(e.UpdateCommittee)
	e.DeleteCommittee = m(e.DeleteCommittee)
	e.Readyz = m(e.Readyz)
	e.Livez = m(e.Livez)
}

// NewCreateCommitteeEndpoint returns an endpoint function that calls the
// method "create-committee" of service "committee".
func NewCreateCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateCommittee(ctx, p)
	}
}

// NewGetCommitteeEndpoint returns an endpoint function that calls the method
// "get-committee" of service "committee".
func NewGetCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetCommittee(ctx, p)
	}
}

// NewUpdateCommitteeEndpoint returns an endpoint function that calls the
// method "update-committee" of service "committee".
func NewUpdateCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateCommittee(ctx, p)
	}
}

// NewDeleteCommitteeEndpoint returns an endpoint function that calls the
// method "delete-committee" of service "committee".
func NewDeleteCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteCommittee(ctx, p)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "committee".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "committee".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}
