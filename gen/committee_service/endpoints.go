// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service endpoints
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package committeeservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "committee-service" service endpoints.
type Endpoints struct {
	CreateCommittee         goa.Endpoint
	GetCommitteeBase        goa.Endpoint
	UpdateCommitteeBase     goa.Endpoint
	DeleteCommittee         goa.Endpoint
	GetCommitteeSettings    goa.Endpoint
	UpdateCommitteeSettings goa.Endpoint
	Readyz                  goa.Endpoint
	Livez                   goa.Endpoint
}

// NewEndpoints wraps the methods of the "committee-service" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateCommittee:         NewCreateCommitteeEndpoint(s, a.JWTAuth),
		GetCommitteeBase:        NewGetCommitteeBaseEndpoint(s, a.JWTAuth),
		UpdateCommitteeBase:     NewUpdateCommitteeBaseEndpoint(s, a.JWTAuth),
		DeleteCommittee:         NewDeleteCommitteeEndpoint(s, a.JWTAuth),
		GetCommitteeSettings:    NewGetCommitteeSettingsEndpoint(s, a.JWTAuth),
		UpdateCommitteeSettings: NewUpdateCommitteeSettingsEndpoint(s, a.JWTAuth),
		Readyz:                  NewReadyzEndpoint(s),
		Livez:                   NewLivezEndpoint(s),
	}
}

// Use applies the given middleware to all the "committee-service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateCommittee = m(e.CreateCommittee)
	e.GetCommitteeBase = m(e.GetCommitteeBase)
	e.UpdateCommitteeBase = m(e.UpdateCommitteeBase)
	e.DeleteCommittee = m(e.DeleteCommittee)
	e.GetCommitteeSettings = m(e.GetCommitteeSettings)
	e.UpdateCommitteeSettings = m(e.UpdateCommitteeSettings)
	e.Readyz = m(e.Readyz)
	e.Livez = m(e.Livez)
}

// NewCreateCommitteeEndpoint returns an endpoint function that calls the
// method "create-committee" of service "committee-service".
func NewCreateCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateCommittee(ctx, p)
	}
}

// NewGetCommitteeBaseEndpoint returns an endpoint function that calls the
// method "get-committee-base" of service "committee-service".
func NewGetCommitteeBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetCommitteeBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetCommitteeBase(ctx, p)
	}
}

// NewUpdateCommitteeBaseEndpoint returns an endpoint function that calls the
// method "update-committee-base" of service "committee-service".
func NewUpdateCommitteeBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateCommitteeBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateCommitteeBase(ctx, p)
	}
}

// NewDeleteCommitteeEndpoint returns an endpoint function that calls the
// method "delete-committee" of service "committee-service".
func NewDeleteCommitteeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteCommitteePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteCommittee(ctx, p)
	}
}

// NewGetCommitteeSettingsEndpoint returns an endpoint function that calls the
// method "get-committee-settings" of service "committee-service".
func NewGetCommitteeSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetCommitteeSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetCommitteeSettings(ctx, p)
	}
}

// NewUpdateCommitteeSettingsEndpoint returns an endpoint function that calls
// the method "update-committee-settings" of service "committee-service".
func NewUpdateCommitteeSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateCommitteeSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateCommitteeSettings(ctx, p)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "committee-service".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "committee-service".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}
