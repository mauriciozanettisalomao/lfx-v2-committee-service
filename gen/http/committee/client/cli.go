// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	committee "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateCommitteePayload builds the payload for the committee
// create-committee endpoint from CLI flags.
func BuildCreateCommitteePayload(committeeCreateCommitteeBody string, committeeCreateCommitteeVersion string, committeeCreateCommitteeBearerToken string) (*committee.CreateCommitteePayload, error) {
	var err error
	var body CreateCommitteeRequestBody
	{
		err = json.Unmarshal([]byte(committeeCreateCommitteeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"business_email_required\": false,\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"enable_voting\": true,\n      \"is_audit_enabled\": false,\n      \"name\": \"Technical Steering Committee\",\n      \"parent_committee_id\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"public\": true,\n      \"public_name\": \"TSC Committee Calendar\",\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.PublicName != nil {
			if utf8.RuneCountInString(*body.PublicName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
			}
		}
		if body.ParentCommitteeID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeCreateCommitteeVersion != "" {
			version = &committeeCreateCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeCreateCommitteeBearerToken != "" {
			bearerToken = &committeeCreateCommitteeBearerToken
		}
	}
	v := &committee.CreateCommitteePayload{
		Name:                  body.Name,
		Category:              body.Category,
		Description:           body.Description,
		Website:               body.Website,
		EnableVoting:          body.EnableVoting,
		BusinessEmailRequired: body.BusinessEmailRequired,
		SsoGroupEnabled:       body.SsoGroupEnabled,
		IsAuditEnabled:        body.IsAuditEnabled,
		Public:                body.Public,
		PublicName:            body.PublicName,
		ParentCommitteeID:     body.ParentCommitteeID,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.BusinessEmailRequired == zero {
			v.BusinessEmailRequired = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.IsAuditEnabled == zero {
			v.IsAuditEnabled = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetCommitteePayload builds the payload for the committee get-committee
// endpoint from CLI flags.
func BuildGetCommitteePayload(committeeGetCommitteeID string, committeeGetCommitteeVersion string, committeeGetCommitteeBearerToken string) (*committee.GetCommitteePayload, error) {
	var err error
	var id string
	{
		id = committeeGetCommitteeID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeGetCommitteeVersion != "" {
			version = &committeeGetCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeGetCommitteeBearerToken != "" {
			bearerToken = &committeeGetCommitteeBearerToken
		}
	}
	v := &committee.GetCommitteePayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteePayload builds the payload for the committee
// update-committee endpoint from CLI flags.
func BuildUpdateCommitteePayload(committeeUpdateCommitteeBody string, committeeUpdateCommitteeID string, committeeUpdateCommitteeVersion string, committeeUpdateCommitteeBearerToken string, committeeUpdateCommitteeEtag string) (*committee.UpdateCommitteePayload, error) {
	var err error
	var body UpdateCommitteeRequestBody
	{
		err = json.Unmarshal([]byte(committeeUpdateCommitteeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"business_email_required\": false,\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"enable_voting\": true,\n      \"is_audit_enabled\": false,\n      \"name\": \"Technical Steering Committee\",\n      \"parent_committee_id\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"project_id\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"public_name\": \"TSC Committee Calendar\",\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if body.ProjectID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.PublicName != nil {
			if utf8.RuneCountInString(*body.PublicName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
			}
		}
		if body.ParentCommitteeID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = committeeUpdateCommitteeID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeUpdateCommitteeVersion != "" {
			version = &committeeUpdateCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeUpdateCommitteeBearerToken != "" {
			bearerToken = &committeeUpdateCommitteeBearerToken
		}
	}
	var etag *string
	{
		if committeeUpdateCommitteeEtag != "" {
			etag = &committeeUpdateCommitteeEtag
		}
	}
	v := &committee.UpdateCommitteePayload{
		ProjectID:             body.ProjectID,
		Name:                  body.Name,
		Category:              body.Category,
		Description:           body.Description,
		Website:               body.Website,
		EnableVoting:          body.EnableVoting,
		BusinessEmailRequired: body.BusinessEmailRequired,
		SsoGroupEnabled:       body.SsoGroupEnabled,
		IsAuditEnabled:        body.IsAuditEnabled,
		Public:                body.Public,
		PublicName:            body.PublicName,
		ParentCommitteeID:     body.ParentCommitteeID,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.BusinessEmailRequired == zero {
			v.BusinessEmailRequired = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.IsAuditEnabled == zero {
			v.IsAuditEnabled = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteCommitteePayload builds the payload for the committee
// delete-committee endpoint from CLI flags.
func BuildDeleteCommitteePayload(committeeDeleteCommitteeID string, committeeDeleteCommitteeVersion string, committeeDeleteCommitteeBearerToken string, committeeDeleteCommitteeEtag string) (*committee.DeleteCommitteePayload, error) {
	var err error
	var id string
	{
		id = committeeDeleteCommitteeID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeDeleteCommitteeVersion != "" {
			version = &committeeDeleteCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeDeleteCommitteeBearerToken != "" {
			bearerToken = &committeeDeleteCommitteeBearerToken
		}
	}
	var etag *string
	{
		if committeeDeleteCommitteeEtag != "" {
			etag = &committeeDeleteCommitteeEtag
		}
	}
	v := &committee.DeleteCommitteePayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
