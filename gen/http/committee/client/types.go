// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package client

import (
	"unicode/utf8"

	committee "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommitteeRequestBody is the type of the "committee" service
// "create-committee" endpoint HTTP request body.
type CreateCommitteeRequestBody struct {
	// The name of the committee
	Name string `form:"name" json:"name" xml:"name"`
	// The category of the committee
	Category string `form:"category" json:"category" xml:"category"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether audit logging is enabled for this committee
	IsAuditEnabled bool `form:"is_audit_enabled" json:"is_audit_enabled" xml:"is_audit_enabled"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The public display name of the committee
	PublicName *string `form:"public_name,omitempty" json:"public_name,omitempty" xml:"public_name,omitempty"`
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string `form:"parent_committee_id,omitempty" json:"parent_committee_id,omitempty" xml:"parent_committee_id,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// UpdateCommitteeRequestBody is the type of the "committee" service
// "update-committee" endpoint HTTP request body.
type UpdateCommitteeRequestBody struct {
	// The project identifier this committee belongs to -- v2 id, not related to v1
	// id directly
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the committee
	Name string `form:"name" json:"name" xml:"name"`
	// The category of the committee
	Category string `form:"category" json:"category" xml:"category"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether audit logging is enabled for this committee
	IsAuditEnabled bool `form:"is_audit_enabled" json:"is_audit_enabled" xml:"is_audit_enabled"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The public display name of the committee
	PublicName *string `form:"public_name,omitempty" json:"public_name,omitempty" xml:"public_name,omitempty"`
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string `form:"parent_committee_id,omitempty" json:"parent_committee_id,omitempty" xml:"parent_committee_id,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// CreateCommitteeResponseBody is the type of the "committee" service
// "create-committee" endpoint HTTP response body.
type CreateCommitteeResponseBody struct {
	// The unique identifier of the committee
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project identifier this committee belongs to -- v2 id, not related to v1
	// id directly
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether audit logging is enabled for this committee
	IsAuditEnabled *bool `form:"is_audit_enabled,omitempty" json:"is_audit_enabled,omitempty" xml:"is_audit_enabled,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The public display name of the committee
	PublicName *string `form:"public_name,omitempty" json:"public_name,omitempty" xml:"public_name,omitempty"`
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string `form:"parent_committee_id,omitempty" json:"parent_committee_id,omitempty" xml:"parent_committee_id,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// GetCommitteeResponseBody is the type of the "committee" service
// "get-committee" endpoint HTTP response body.
type GetCommitteeResponseBody CommitteeResponseBody

// UpdateCommitteeResponseBody is the type of the "committee" service
// "update-committee" endpoint HTTP response body.
type UpdateCommitteeResponseBody struct {
	// The unique identifier of the committee
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project identifier this committee belongs to -- v2 id, not related to v1
	// id directly
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether audit logging is enabled for this committee
	IsAuditEnabled *bool `form:"is_audit_enabled,omitempty" json:"is_audit_enabled,omitempty" xml:"is_audit_enabled,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The public display name of the committee
	PublicName *string `form:"public_name,omitempty" json:"public_name,omitempty" xml:"public_name,omitempty"`
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string `form:"parent_committee_id,omitempty" json:"parent_committee_id,omitempty" xml:"parent_committee_id,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// CreateCommitteeBadRequestResponseBody is the type of the "committee" service
// "create-committee" endpoint HTTP response body for the "BadRequest" error.
type CreateCommitteeBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeConflictResponseBody is the type of the "committee" service
// "create-committee" endpoint HTTP response body for the "Conflict" error.
type CreateCommitteeConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeInternalServerErrorResponseBody is the type of the
// "committee" service "create-committee" endpoint HTTP response body for the
// "InternalServerError" error.
type CreateCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeServiceUnavailableResponseBody is the type of the "committee"
// service "create-committee" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type CreateCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeInternalServerErrorResponseBody is the type of the "committee"
// service "get-committee" endpoint HTTP response body for the
// "InternalServerError" error.
type GetCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeNotFoundResponseBody is the type of the "committee" service
// "get-committee" endpoint HTTP response body for the "NotFound" error.
type GetCommitteeNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeServiceUnavailableResponseBody is the type of the "committee"
// service "get-committee" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBadRequestResponseBody is the type of the "committee" service
// "update-committee" endpoint HTTP response body for the "BadRequest" error.
type UpdateCommitteeBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeInternalServerErrorResponseBody is the type of the
// "committee" service "update-committee" endpoint HTTP response body for the
// "InternalServerError" error.
type UpdateCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeNotFoundResponseBody is the type of the "committee" service
// "update-committee" endpoint HTTP response body for the "NotFound" error.
type UpdateCommitteeNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeServiceUnavailableResponseBody is the type of the "committee"
// service "update-committee" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type UpdateCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeBadRequestResponseBody is the type of the "committee" service
// "delete-committee" endpoint HTTP response body for the "BadRequest" error.
type DeleteCommitteeBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeInternalServerErrorResponseBody is the type of the
// "committee" service "delete-committee" endpoint HTTP response body for the
// "InternalServerError" error.
type DeleteCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeNotFoundResponseBody is the type of the "committee" service
// "delete-committee" endpoint HTTP response body for the "NotFound" error.
type DeleteCommitteeNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeServiceUnavailableResponseBody is the type of the "committee"
// service "delete-committee" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type DeleteCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "committee" service
// "readyz" endpoint HTTP response body for the "ServiceUnavailable" error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CommitteeResponseBody is used to define fields on response body types.
type CommitteeResponseBody struct {
	// The unique identifier of the committee
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The project identifier this committee belongs to -- v2 id, not related to v1
	// id directly
	ProjectID *string `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether audit logging is enabled for this committee
	IsAuditEnabled *bool `form:"is_audit_enabled,omitempty" json:"is_audit_enabled,omitempty" xml:"is_audit_enabled,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The public display name of the committee
	PublicName *string `form:"public_name,omitempty" json:"public_name,omitempty" xml:"public_name,omitempty"`
	// The ID of the parent committee, should be empty if there is none
	ParentCommitteeID *string `form:"parent_committee_id,omitempty" json:"parent_committee_id,omitempty" xml:"parent_committee_id,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// NewCreateCommitteeRequestBody builds the HTTP request body from the payload
// of the "create-committee" endpoint of the "committee" service.
func NewCreateCommitteeRequestBody(p *committee.CreateCommitteePayload) *CreateCommitteeRequestBody {
	body := &CreateCommitteeRequestBody{
		Name:                  p.Name,
		Category:              p.Category,
		Description:           p.Description,
		Website:               p.Website,
		EnableVoting:          p.EnableVoting,
		BusinessEmailRequired: p.BusinessEmailRequired,
		SsoGroupEnabled:       p.SsoGroupEnabled,
		IsAuditEnabled:        p.IsAuditEnabled,
		Public:                p.Public,
		PublicName:            p.PublicName,
		ParentCommitteeID:     p.ParentCommitteeID,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.IsAuditEnabled == zero {
			body.IsAuditEnabled = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: p.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	return body
}

// NewUpdateCommitteeRequestBody builds the HTTP request body from the payload
// of the "update-committee" endpoint of the "committee" service.
func NewUpdateCommitteeRequestBody(p *committee.UpdateCommitteePayload) *UpdateCommitteeRequestBody {
	body := &UpdateCommitteeRequestBody{
		ProjectID:             p.ProjectID,
		Name:                  p.Name,
		Category:              p.Category,
		Description:           p.Description,
		Website:               p.Website,
		EnableVoting:          p.EnableVoting,
		BusinessEmailRequired: p.BusinessEmailRequired,
		SsoGroupEnabled:       p.SsoGroupEnabled,
		IsAuditEnabled:        p.IsAuditEnabled,
		Public:                p.Public,
		PublicName:            p.PublicName,
		ParentCommitteeID:     p.ParentCommitteeID,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.IsAuditEnabled == zero {
			body.IsAuditEnabled = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: p.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	return body
}

// NewCreateCommitteeCommitteeCreated builds a "committee" service
// "create-committee" endpoint result from a HTTP "Created" response.
func NewCreateCommitteeCommitteeCreated(body *CreateCommitteeResponseBody) *committee.Committee {
	v := &committee.Committee{
		ID:                body.ID,
		ProjectID:         body.ProjectID,
		Name:              body.Name,
		Category:          body.Category,
		Description:       body.Description,
		Website:           body.Website,
		PublicName:        body.PublicName,
		ParentCommitteeID: body.ParentCommitteeID,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.IsAuditEnabled != nil {
		v.IsAuditEnabled = *body.IsAuditEnabled
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.IsAuditEnabled == nil {
		v.IsAuditEnabled = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}

	return v
}

// NewCreateCommitteeBadRequest builds a committee service create-committee
// endpoint BadRequest error.
func NewCreateCommitteeBadRequest(body *CreateCommitteeBadRequestResponseBody) *committee.BadRequestError {
	v := &committee.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeConflict builds a committee service create-committee
// endpoint Conflict error.
func NewCreateCommitteeConflict(body *CreateCommitteeConflictResponseBody) *committee.ConflictError {
	v := &committee.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeInternalServerError builds a committee service
// create-committee endpoint InternalServerError error.
func NewCreateCommitteeInternalServerError(body *CreateCommitteeInternalServerErrorResponseBody) *committee.InternalServerError {
	v := &committee.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeServiceUnavailable builds a committee service
// create-committee endpoint ServiceUnavailable error.
func NewCreateCommitteeServiceUnavailable(body *CreateCommitteeServiceUnavailableResponseBody) *committee.ServiceUnavailableError {
	v := &committee.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeResultOK builds a "committee" service "get-committee"
// endpoint result from a HTTP "OK" response.
func NewGetCommitteeResultOK(body *GetCommitteeResponseBody, etag *string) *committee.GetCommitteeResult {
	v := &committee.Committee{
		ID:                body.ID,
		ProjectID:         body.ProjectID,
		Name:              body.Name,
		Category:          body.Category,
		Description:       body.Description,
		Website:           body.Website,
		PublicName:        body.PublicName,
		ParentCommitteeID: body.ParentCommitteeID,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.IsAuditEnabled != nil {
		v.IsAuditEnabled = *body.IsAuditEnabled
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.IsAuditEnabled == nil {
		v.IsAuditEnabled = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	res := &committee.GetCommitteeResult{
		Committee: v,
	}
	res.Etag = etag

	return res
}

// NewGetCommitteeInternalServerError builds a committee service get-committee
// endpoint InternalServerError error.
func NewGetCommitteeInternalServerError(body *GetCommitteeInternalServerErrorResponseBody) *committee.InternalServerError {
	v := &committee.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeNotFound builds a committee service get-committee endpoint
// NotFound error.
func NewGetCommitteeNotFound(body *GetCommitteeNotFoundResponseBody) *committee.NotFoundError {
	v := &committee.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeServiceUnavailable builds a committee service get-committee
// endpoint ServiceUnavailable error.
func NewGetCommitteeServiceUnavailable(body *GetCommitteeServiceUnavailableResponseBody) *committee.ServiceUnavailableError {
	v := &committee.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeCommitteeOK builds a "committee" service
// "update-committee" endpoint result from a HTTP "OK" response.
func NewUpdateCommitteeCommitteeOK(body *UpdateCommitteeResponseBody) *committee.Committee {
	v := &committee.Committee{
		ID:                body.ID,
		ProjectID:         body.ProjectID,
		Name:              body.Name,
		Category:          body.Category,
		Description:       body.Description,
		Website:           body.Website,
		PublicName:        body.PublicName,
		ParentCommitteeID: body.ParentCommitteeID,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.IsAuditEnabled != nil {
		v.IsAuditEnabled = *body.IsAuditEnabled
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.IsAuditEnabled == nil {
		v.IsAuditEnabled = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}

	return v
}

// NewUpdateCommitteeBadRequest builds a committee service update-committee
// endpoint BadRequest error.
func NewUpdateCommitteeBadRequest(body *UpdateCommitteeBadRequestResponseBody) *committee.BadRequestError {
	v := &committee.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeInternalServerError builds a committee service
// update-committee endpoint InternalServerError error.
func NewUpdateCommitteeInternalServerError(body *UpdateCommitteeInternalServerErrorResponseBody) *committee.InternalServerError {
	v := &committee.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeNotFound builds a committee service update-committee
// endpoint NotFound error.
func NewUpdateCommitteeNotFound(body *UpdateCommitteeNotFoundResponseBody) *committee.NotFoundError {
	v := &committee.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeServiceUnavailable builds a committee service
// update-committee endpoint ServiceUnavailable error.
func NewUpdateCommitteeServiceUnavailable(body *UpdateCommitteeServiceUnavailableResponseBody) *committee.ServiceUnavailableError {
	v := &committee.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeBadRequest builds a committee service delete-committee
// endpoint BadRequest error.
func NewDeleteCommitteeBadRequest(body *DeleteCommitteeBadRequestResponseBody) *committee.BadRequestError {
	v := &committee.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeInternalServerError builds a committee service
// delete-committee endpoint InternalServerError error.
func NewDeleteCommitteeInternalServerError(body *DeleteCommitteeInternalServerErrorResponseBody) *committee.InternalServerError {
	v := &committee.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeNotFound builds a committee service delete-committee
// endpoint NotFound error.
func NewDeleteCommitteeNotFound(body *DeleteCommitteeNotFoundResponseBody) *committee.NotFoundError {
	v := &committee.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeServiceUnavailable builds a committee service
// delete-committee endpoint ServiceUnavailable error.
func NewDeleteCommitteeServiceUnavailable(body *DeleteCommitteeServiceUnavailableResponseBody) *committee.ServiceUnavailableError {
	v := &committee.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a committee service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *committee.ServiceUnavailableError {
	v := &committee.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// ValidateCreateCommitteeResponseBody runs the validations defined on
// Create-CommitteeResponseBody
func ValidateCreateCommitteeResponseBody(body *CreateCommitteeResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.ProjectID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.PublicName != nil {
		if utf8.RuneCountInString(*body.PublicName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
		}
	}
	if body.ParentCommitteeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
	}
	return
}

// ValidateGetCommitteeResponseBody runs the validations defined on
// Get-CommitteeResponseBody
func ValidateGetCommitteeResponseBody(body *GetCommitteeResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.ProjectID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.PublicName != nil {
		if utf8.RuneCountInString(*body.PublicName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
		}
	}
	if body.ParentCommitteeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateCommitteeResponseBody runs the validations defined on
// Update-CommitteeResponseBody
func ValidateUpdateCommitteeResponseBody(body *UpdateCommitteeResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.ProjectID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.PublicName != nil {
		if utf8.RuneCountInString(*body.PublicName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
		}
	}
	if body.ParentCommitteeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
	}
	return
}

// ValidateCreateCommitteeBadRequestResponseBody runs the validations defined
// on create-committee_BadRequest_response_body
func ValidateCreateCommitteeBadRequestResponseBody(body *CreateCommitteeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeConflictResponseBody runs the validations defined on
// create-committee_Conflict_response_body
func ValidateCreateCommitteeConflictResponseBody(body *CreateCommitteeConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeInternalServerErrorResponseBody runs the validations
// defined on create-committee_InternalServerError_response_body
func ValidateCreateCommitteeInternalServerErrorResponseBody(body *CreateCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeServiceUnavailableResponseBody runs the validations
// defined on create-committee_ServiceUnavailable_response_body
func ValidateCreateCommitteeServiceUnavailableResponseBody(body *CreateCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeInternalServerErrorResponseBody runs the validations
// defined on get-committee_InternalServerError_response_body
func ValidateGetCommitteeInternalServerErrorResponseBody(body *GetCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeNotFoundResponseBody runs the validations defined on
// get-committee_NotFound_response_body
func ValidateGetCommitteeNotFoundResponseBody(body *GetCommitteeNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeServiceUnavailableResponseBody runs the validations
// defined on get-committee_ServiceUnavailable_response_body
func ValidateGetCommitteeServiceUnavailableResponseBody(body *GetCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBadRequestResponseBody runs the validations defined
// on update-committee_BadRequest_response_body
func ValidateUpdateCommitteeBadRequestResponseBody(body *UpdateCommitteeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeInternalServerErrorResponseBody runs the validations
// defined on update-committee_InternalServerError_response_body
func ValidateUpdateCommitteeInternalServerErrorResponseBody(body *UpdateCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeNotFoundResponseBody runs the validations defined on
// update-committee_NotFound_response_body
func ValidateUpdateCommitteeNotFoundResponseBody(body *UpdateCommitteeNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeServiceUnavailableResponseBody runs the validations
// defined on update-committee_ServiceUnavailable_response_body
func ValidateUpdateCommitteeServiceUnavailableResponseBody(body *UpdateCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeBadRequestResponseBody runs the validations defined
// on delete-committee_BadRequest_response_body
func ValidateDeleteCommitteeBadRequestResponseBody(body *DeleteCommitteeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeInternalServerErrorResponseBody runs the validations
// defined on delete-committee_InternalServerError_response_body
func ValidateDeleteCommitteeInternalServerErrorResponseBody(body *DeleteCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeNotFoundResponseBody runs the validations defined on
// delete-committee_NotFound_response_body
func ValidateDeleteCommitteeNotFoundResponseBody(body *DeleteCommitteeNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeServiceUnavailableResponseBody runs the validations
// defined on delete-committee_ServiceUnavailable_response_body
func ValidateDeleteCommitteeServiceUnavailableResponseBody(body *DeleteCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCommitteeResponseBody runs the validations defined on
// committeeResponseBody
func ValidateCommitteeResponseBody(body *CommitteeResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.ProjectID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_id", *body.ProjectID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.PublicName != nil {
		if utf8.RuneCountInString(*body.PublicName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.public_name", *body.PublicName, utf8.RuneCountInString(*body.PublicName), 100, false))
		}
	}
	if body.ParentCommitteeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_committee_id", *body.ParentCommitteeID, goa.FormatUUID))
	}
	return
}
