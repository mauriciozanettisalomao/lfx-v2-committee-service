// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	committee "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateCommitteeRequest instantiates a HTTP request object with method
// and path set to call the "committee" service "create-committee" endpoint
func (c *Client) BuildCreateCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCommitteeCommitteePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "create-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCommitteeRequest returns an encoder for requests sent to the
// committee create-committee server.
func EncodeCreateCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committee.CreateCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee", "create-committee", "*committee.CreateCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewCreateCommitteeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee", "create-committee", err)
		}
		return nil
	}
}

// DecodeCreateCommitteeResponse returns a decoder for responses returned by
// the committee create-committee endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateCommitteeResponse may return the following errors:
//   - "BadRequest" (type *committee.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committee.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committee.InternalServerError): http.StatusInternalServerError
//   - "ServiceUnavailable" (type *committee.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCommitteeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "create-committee", err)
			}
			err = ValidateCreateCommitteeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "create-committee", err)
			}
			res := NewCreateCommitteeCommitteeCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCommitteeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "create-committee", err)
			}
			err = ValidateCreateCommitteeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "create-committee", err)
			}
			return nil, NewCreateCommitteeBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateCommitteeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "create-committee", err)
			}
			err = ValidateCreateCommitteeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "create-committee", err)
			}
			return nil, NewCreateCommitteeConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "create-committee", err)
			}
			err = ValidateCreateCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "create-committee", err)
			}
			return nil, NewCreateCommitteeInternalServerError(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "create-committee", err)
			}
			err = ValidateCreateCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "create-committee", err)
			}
			return nil, NewCreateCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "create-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCommitteeRequest instantiates a HTTP request object with method and
// path set to call the "committee" service "get-committee" endpoint
func (c *Client) BuildGetCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*committee.GetCommitteePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee", "get-committee", "*committee.GetCommitteePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCommitteeCommitteePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "get-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCommitteeRequest returns an encoder for requests sent to the
// committee get-committee server.
func EncodeGetCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committee.GetCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee", "get-committee", "*committee.GetCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCommitteeResponse returns a decoder for responses returned by the
// committee get-committee endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetCommitteeResponse may return the following errors:
//   - "InternalServerError" (type *committee.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committee.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committee.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCommitteeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "get-committee", err)
			}
			err = ValidateGetCommitteeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "get-committee", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetCommitteeResultOK(&body, etag)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "get-committee", err)
			}
			err = ValidateGetCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "get-committee", err)
			}
			return nil, NewGetCommitteeInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetCommitteeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "get-committee", err)
			}
			err = ValidateGetCommitteeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "get-committee", err)
			}
			return nil, NewGetCommitteeNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "get-committee", err)
			}
			err = ValidateGetCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "get-committee", err)
			}
			return nil, NewGetCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "get-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCommitteeRequest instantiates a HTTP request object with method
// and path set to call the "committee" service "update-committee" endpoint
func (c *Client) BuildUpdateCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*committee.UpdateCommitteePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee", "update-committee", "*committee.UpdateCommitteePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCommitteeCommitteePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "update-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCommitteeRequest returns an encoder for requests sent to the
// committee update-committee server.
func EncodeUpdateCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committee.UpdateCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee", "update-committee", "*committee.UpdateCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("ETag", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewUpdateCommitteeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee", "update-committee", err)
		}
		return nil
	}
}

// DecodeUpdateCommitteeResponse returns a decoder for responses returned by
// the committee update-committee endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateCommitteeResponse may return the following errors:
//   - "BadRequest" (type *committee.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *committee.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committee.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committee.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCommitteeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "update-committee", err)
			}
			err = ValidateUpdateCommitteeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "update-committee", err)
			}
			res := NewUpdateCommitteeCommitteeOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateCommitteeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "update-committee", err)
			}
			err = ValidateUpdateCommitteeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "update-committee", err)
			}
			return nil, NewUpdateCommitteeBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "update-committee", err)
			}
			err = ValidateUpdateCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "update-committee", err)
			}
			return nil, NewUpdateCommitteeInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateCommitteeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "update-committee", err)
			}
			err = ValidateUpdateCommitteeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "update-committee", err)
			}
			return nil, NewUpdateCommitteeNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "update-committee", err)
			}
			err = ValidateUpdateCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "update-committee", err)
			}
			return nil, NewUpdateCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "update-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCommitteeRequest instantiates a HTTP request object with method
// and path set to call the "committee" service "delete-committee" endpoint
func (c *Client) BuildDeleteCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*committee.DeleteCommitteePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee", "delete-committee", "*committee.DeleteCommitteePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCommitteeCommitteePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "delete-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCommitteeRequest returns an encoder for requests sent to the
// committee delete-committee server.
func EncodeDeleteCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committee.DeleteCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee", "delete-committee", "*committee.DeleteCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("ETag", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteCommitteeResponse returns a decoder for responses returned by
// the committee delete-committee endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteCommitteeResponse may return the following errors:
//   - "BadRequest" (type *committee.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *committee.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committee.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committee.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteCommitteeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteCommitteeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "delete-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "committee" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzCommitteePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// committee readyz endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "ServiceUnavailable" (type *committee.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "readyz", err)
			}
			err = ValidateReadyzServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee", "readyz", err)
			}
			return nil, NewReadyzServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "committee" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezCommitteePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// committee livez endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee", "livez", resp.StatusCode, string(body))
		}
	}
}
