// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP server types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package server

import (
	"unicode/utf8"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommitteeRequestBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP request body.
type CreateCommitteeRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateCommitteeBaseRequestBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP request body.
type UpdateCommitteeBaseRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
}

// UpdateCommitteeSettingsRequestBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP request body.
type UpdateCommitteeSettingsRequestBody struct {
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateCommitteeResponseBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP response body.
type CreateCommitteeResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// GetCommitteeBaseResponseBody is the type of the "committee-service" service
// "get-committee-base" endpoint HTTP response body.
type GetCommitteeBaseResponseBody CommitteeFullWithReadonlyAttributesResponseBody

// UpdateCommitteeBaseResponseBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP response body.
type UpdateCommitteeBaseResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// GetCommitteeSettingsResponseBody is the type of the "committee-service"
// service "get-committee-settings" endpoint HTTP response body.
type GetCommitteeSettingsResponseBody CommitteeSettingsWithReadonlyAttributesResponseBody

// UpdateCommitteeSettingsResponseBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP response body.
type UpdateCommitteeSettingsResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the committee was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the committee was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "BadRequest"
// error.
type CreateCommitteeBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeConflictResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "Conflict"
// error.
type CreateCommitteeConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type CreateCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "NotFound"
// error.
type CreateCommitteeNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type CreateCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "InternalServerError" error.
type GetCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseNotFoundResponseBody is the type of the "committee-service"
// service "get-committee-base" endpoint HTTP response body for the "NotFound"
// error.
type GetCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateCommitteeBaseBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "NotFound" error.
type UpdateCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteCommitteeBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type DeleteCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "NotFound"
// error.
type DeleteCommitteeNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type DeleteCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type GetCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "NotFound" error.
type GetCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "BadRequest" error.
type UpdateCommitteeSettingsBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdateCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "NotFound" error.
type UpdateCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdateCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "committee-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CommitteeFullWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type CommitteeFullWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// CommitteeSettingsWithReadonlyAttributesResponseBody is used to define fields
// on response body types.
type CommitteeSettingsWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the committee was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the committee was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateCommitteeResponseBody builds the HTTP response body from the result
// of the "create-committee" endpoint of the "committee-service" service.
func NewCreateCommitteeResponseBody(res *committeeservice.CommitteeFullWithReadonlyAttributes) *CreateCommitteeResponseBody {
	body := &CreateCommitteeResponseBody{
		UID:              res.UID,
		ProjectUID:       res.ProjectUID,
		Name:             res.Name,
		Category:         res.Category,
		Description:      res.Description,
		Website:          res.Website,
		EnableVoting:     res.EnableVoting,
		SsoGroupEnabled:  res.SsoGroupEnabled,
		RequiresReview:   res.RequiresReview,
		Public:           res.Public,
		DisplayName:      res.DisplayName,
		ParentUID:        res.ParentUID,
		SsoGroupName:     res.SsoGroupName,
		TotalMembers:     res.TotalMembers,
		TotalVotingRepos: res.TotalVotingRepos,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewGetCommitteeBaseResponseBody builds the HTTP response body from the
// result of the "get-committee-base" endpoint of the "committee-service"
// service.
func NewGetCommitteeBaseResponseBody(res *committeeservice.GetCommitteeBaseResult) *GetCommitteeBaseResponseBody {
	body := &GetCommitteeBaseResponseBody{
		UID:              res.CommitteeBase.UID,
		ProjectUID:       res.CommitteeBase.ProjectUID,
		Name:             res.CommitteeBase.Name,
		Category:         res.CommitteeBase.Category,
		Description:      res.CommitteeBase.Description,
		Website:          res.CommitteeBase.Website,
		EnableVoting:     res.CommitteeBase.EnableVoting,
		SsoGroupEnabled:  res.CommitteeBase.SsoGroupEnabled,
		RequiresReview:   res.CommitteeBase.RequiresReview,
		Public:           res.CommitteeBase.Public,
		DisplayName:      res.CommitteeBase.DisplayName,
		ParentUID:        res.CommitteeBase.ParentUID,
		SsoGroupName:     res.CommitteeBase.SsoGroupName,
		TotalMembers:     res.CommitteeBase.TotalMembers,
		TotalVotingRepos: res.CommitteeBase.TotalVotingRepos,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.CommitteeBase.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.CommitteeBase.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewUpdateCommitteeBaseResponseBody builds the HTTP response body from the
// result of the "update-committee-base" endpoint of the "committee-service"
// service.
func NewUpdateCommitteeBaseResponseBody(res *committeeservice.CommitteeFullWithReadonlyAttributes) *UpdateCommitteeBaseResponseBody {
	body := &UpdateCommitteeBaseResponseBody{
		UID:              res.UID,
		ProjectUID:       res.ProjectUID,
		Name:             res.Name,
		Category:         res.Category,
		Description:      res.Description,
		Website:          res.Website,
		EnableVoting:     res.EnableVoting,
		SsoGroupEnabled:  res.SsoGroupEnabled,
		RequiresReview:   res.RequiresReview,
		Public:           res.Public,
		DisplayName:      res.DisplayName,
		ParentUID:        res.ParentUID,
		SsoGroupName:     res.SsoGroupName,
		TotalMembers:     res.TotalMembers,
		TotalVotingRepos: res.TotalVotingRepos,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewGetCommitteeSettingsResponseBody builds the HTTP response body from the
// result of the "get-committee-settings" endpoint of the "committee-service"
// service.
func NewGetCommitteeSettingsResponseBody(res *committeeservice.GetCommitteeSettingsResult) *GetCommitteeSettingsResponseBody {
	body := &GetCommitteeSettingsResponseBody{
		UID:                   res.CommitteeSettings.UID,
		BusinessEmailRequired: res.CommitteeSettings.BusinessEmailRequired,
		LastReviewedAt:        res.CommitteeSettings.LastReviewedAt,
		LastReviewedBy:        res.CommitteeSettings.LastReviewedBy,
		CreatedAt:             res.CommitteeSettings.CreatedAt,
		UpdatedAt:             res.CommitteeSettings.UpdatedAt,
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	return body
}

// NewUpdateCommitteeSettingsResponseBody builds the HTTP response body from
// the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsResponseBody(res *committeeservice.CommitteeSettingsWithReadonlyAttributes) *UpdateCommitteeSettingsResponseBody {
	body := &UpdateCommitteeSettingsResponseBody{
		UID:                   res.UID,
		BusinessEmailRequired: res.BusinessEmailRequired,
		LastReviewedAt:        res.LastReviewedAt,
		LastReviewedBy:        res.LastReviewedBy,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	return body
}

// NewCreateCommitteeBadRequestResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeBadRequestResponseBody(res *committeeservice.BadRequestError) *CreateCommitteeBadRequestResponseBody {
	body := &CreateCommitteeBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeConflictResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeConflictResponseBody(res *committeeservice.ConflictError) *CreateCommitteeConflictResponseBody {
	body := &CreateCommitteeConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "create-committee" endpoint of the
// "committee-service" service.
func NewCreateCommitteeInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *CreateCommitteeInternalServerErrorResponseBody {
	body := &CreateCommitteeInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeNotFoundResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeNotFoundResponseBody(res *committeeservice.NotFoundError) *CreateCommitteeNotFoundResponseBody {
	body := &CreateCommitteeNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "create-committee" endpoint of the
// "committee-service" service.
func NewCreateCommitteeServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *CreateCommitteeServiceUnavailableResponseBody {
	body := &CreateCommitteeServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "get-committee-base" endpoint of the
// "committee-service" service.
func NewGetCommitteeBaseInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *GetCommitteeBaseInternalServerErrorResponseBody {
	body := &GetCommitteeBaseInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseNotFoundResponseBody builds the HTTP response body from
// the result of the "get-committee-base" endpoint of the "committee-service"
// service.
func NewGetCommitteeBaseNotFoundResponseBody(res *committeeservice.NotFoundError) *GetCommitteeBaseNotFoundResponseBody {
	body := &GetCommitteeBaseNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get-committee-base" endpoint of the
// "committee-service" service.
func NewGetCommitteeBaseServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *GetCommitteeBaseServiceUnavailableResponseBody {
	body := &GetCommitteeBaseServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseBadRequestResponseBody builds the HTTP response body
// from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseBadRequestResponseBody(res *committeeservice.BadRequestError) *UpdateCommitteeBaseBadRequestResponseBody {
	body := &UpdateCommitteeBaseBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *UpdateCommitteeBaseInternalServerErrorResponseBody {
	body := &UpdateCommitteeBaseInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseNotFoundResponseBody(res *committeeservice.NotFoundError) *UpdateCommitteeBaseNotFoundResponseBody {
	body := &UpdateCommitteeBaseNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *UpdateCommitteeBaseServiceUnavailableResponseBody {
	body := &UpdateCommitteeBaseServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeBadRequestResponseBody builds the HTTP response body from
// the result of the "delete-committee" endpoint of the "committee-service"
// service.
func NewDeleteCommitteeBadRequestResponseBody(res *committeeservice.BadRequestError) *DeleteCommitteeBadRequestResponseBody {
	body := &DeleteCommitteeBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "delete-committee" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *DeleteCommitteeInternalServerErrorResponseBody {
	body := &DeleteCommitteeInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeNotFoundResponseBody builds the HTTP response body from
// the result of the "delete-committee" endpoint of the "committee-service"
// service.
func NewDeleteCommitteeNotFoundResponseBody(res *committeeservice.NotFoundError) *DeleteCommitteeNotFoundResponseBody {
	body := &DeleteCommitteeNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "delete-committee" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *DeleteCommitteeServiceUnavailableResponseBody {
	body := &DeleteCommitteeServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "get-committee-settings" endpoint of
// the "committee-service" service.
func NewGetCommitteeSettingsInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *GetCommitteeSettingsInternalServerErrorResponseBody {
	body := &GetCommitteeSettingsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "get-committee-settings" endpoint of the
// "committee-service" service.
func NewGetCommitteeSettingsNotFoundResponseBody(res *committeeservice.NotFoundError) *GetCommitteeSettingsNotFoundResponseBody {
	body := &GetCommitteeSettingsNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "get-committee-settings" endpoint of
// the "committee-service" service.
func NewGetCommitteeSettingsServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *GetCommitteeSettingsServiceUnavailableResponseBody {
	body := &GetCommitteeSettingsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsBadRequestResponseBody builds the HTTP response
// body from the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsBadRequestResponseBody(res *committeeservice.BadRequestError) *UpdateCommitteeSettingsBadRequestResponseBody {
	body := &UpdateCommitteeSettingsBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-settings" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeSettingsInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *UpdateCommitteeSettingsInternalServerErrorResponseBody {
	body := &UpdateCommitteeSettingsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsNotFoundResponseBody(res *committeeservice.NotFoundError) *UpdateCommitteeSettingsNotFoundResponseBody {
	body := &UpdateCommitteeSettingsNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-settings" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeSettingsServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *UpdateCommitteeSettingsServiceUnavailableResponseBody {
	body := &UpdateCommitteeSettingsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewReadyzServiceUnavailableResponseBody builds the HTTP response body from
// the result of the "readyz" endpoint of the "committee-service" service.
func NewReadyzServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *ReadyzServiceUnavailableResponseBody {
	body := &ReadyzServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteePayload builds a committee-service service
// create-committee endpoint payload.
func NewCreateCommitteePayload(body *CreateCommitteeRequestBody, version *string, bearerToken *string) *committeeservice.CreateCommitteePayload {
	v := &committeeservice.CreateCommitteePayload{
		ProjectUID:     body.ProjectUID,
		Name:           *body.Name,
		Category:       *body.Category,
		Description:    body.Description,
		Website:        body.Website,
		DisplayName:    body.DisplayName,
		ParentUID:      body.ParentUID,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetCommitteeBasePayload builds a committee-service service
// get-committee-base endpoint payload.
func NewGetCommitteeBasePayload(uid string, version *string, bearerToken *string) *committeeservice.GetCommitteeBasePayload {
	v := &committeeservice.GetCommitteeBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeBasePayload builds a committee-service service
// update-committee-base endpoint payload.
func NewUpdateCommitteeBasePayload(body *UpdateCommitteeBaseRequestBody, uid string, version *string, bearerToken *string, etag *string) *committeeservice.UpdateCommitteeBasePayload {
	v := &committeeservice.UpdateCommitteeBasePayload{
		ProjectUID:  body.ProjectUID,
		Name:        *body.Name,
		Category:    *body.Category,
		Description: body.Description,
		Website:     body.Website,
		DisplayName: body.DisplayName,
		ParentUID:   body.ParentUID,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// NewDeleteCommitteePayload builds a committee-service service
// delete-committee endpoint payload.
func NewDeleteCommitteePayload(uid string, version *string, bearerToken *string, etag *string) *committeeservice.DeleteCommitteePayload {
	v := &committeeservice.DeleteCommitteePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// NewGetCommitteeSettingsPayload builds a committee-service service
// get-committee-settings endpoint payload.
func NewGetCommitteeSettingsPayload(uid string, version *string, bearerToken *string) *committeeservice.GetCommitteeSettingsPayload {
	v := &committeeservice.GetCommitteeSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeSettingsPayload builds a committee-service service
// update-committee-settings endpoint payload.
func NewUpdateCommitteeSettingsPayload(body *UpdateCommitteeSettingsRequestBody, uid string, version *string, bearerToken *string, etag *string) *committeeservice.UpdateCommitteeSettingsPayload {
	v := &committeeservice.UpdateCommitteeSettingsPayload{
		BusinessEmailRequired: *body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// ValidateCreateCommitteeRequestBody runs the validations defined on
// Create-CommitteeRequestBody
func ValidateCreateCommitteeRequestBody(body *CreateCommitteeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateCommitteeBaseRequestBody runs the validations defined on
// Update-Committee-BaseRequestBody
func ValidateUpdateCommitteeBaseRequestBody(body *UpdateCommitteeBaseRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateCommitteeSettingsRequestBody runs the validations defined on
// Update-Committee-SettingsRequestBody
func ValidateUpdateCommitteeSettingsRequestBody(body *UpdateCommitteeSettingsRequestBody) (err error) {
	if body.BusinessEmailRequired == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("business_email_required", "body"))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}
