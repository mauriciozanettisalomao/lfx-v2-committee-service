// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP server
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package server

import (
	"context"
	"net/http"
	"path"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the committee-service service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	CreateCommittee         http.Handler
	GetCommitteeBase        http.Handler
	UpdateCommitteeBase     http.Handler
	DeleteCommittee         http.Handler
	GetCommitteeSettings    http.Handler
	UpdateCommitteeSettings http.Handler
	Readyz                  http.Handler
	Livez                   http.Handler
	GenHTTPOpenapi3JSON     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the committee-service service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *committeeservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"CreateCommittee", "POST", "/committees"},
			{"GetCommitteeBase", "GET", "/committees/{uid}"},
			{"UpdateCommitteeBase", "PUT", "/committees/{uid}"},
			{"DeleteCommittee", "DELETE", "/committees/{uid}"},
			{"GetCommitteeSettings", "GET", "/committees/{uid}/settings"},
			{"UpdateCommitteeSettings", "PUT", "/committees/{uid}/settings"},
			{"Readyz", "GET", "/readyz"},
			{"Livez", "GET", "/livez"},
			{"Serve gen/http/openapi3.json", "GET", "/openapi.json"},
		},
		CreateCommittee:         NewCreateCommitteeHandler(e.CreateCommittee, mux, decoder, encoder, errhandler, formatter),
		GetCommitteeBase:        NewGetCommitteeBaseHandler(e.GetCommitteeBase, mux, decoder, encoder, errhandler, formatter),
		UpdateCommitteeBase:     NewUpdateCommitteeBaseHandler(e.UpdateCommitteeBase, mux, decoder, encoder, errhandler, formatter),
		DeleteCommittee:         NewDeleteCommitteeHandler(e.DeleteCommittee, mux, decoder, encoder, errhandler, formatter),
		GetCommitteeSettings:    NewGetCommitteeSettingsHandler(e.GetCommitteeSettings, mux, decoder, encoder, errhandler, formatter),
		UpdateCommitteeSettings: NewUpdateCommitteeSettingsHandler(e.UpdateCommitteeSettings, mux, decoder, encoder, errhandler, formatter),
		Readyz:                  NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		Livez:                   NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON:     http.FileServer(fileSystemGenHTTPOpenapi3JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "committee-service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateCommittee = m(s.CreateCommittee)
	s.GetCommitteeBase = m(s.GetCommitteeBase)
	s.UpdateCommitteeBase = m(s.UpdateCommitteeBase)
	s.DeleteCommittee = m(s.DeleteCommittee)
	s.GetCommitteeSettings = m(s.GetCommitteeSettings)
	s.UpdateCommitteeSettings = m(s.UpdateCommitteeSettings)
	s.Readyz = m(s.Readyz)
	s.Livez = m(s.Livez)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return committeeservice.MethodNames[:] }

// Mount configures the mux to serve the committee-service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateCommitteeHandler(mux, h.CreateCommittee)
	MountGetCommitteeBaseHandler(mux, h.GetCommitteeBase)
	MountUpdateCommitteeBaseHandler(mux, h.UpdateCommitteeBase)
	MountDeleteCommitteeHandler(mux, h.DeleteCommittee)
	MountGetCommitteeSettingsHandler(mux, h.GetCommitteeSettings)
	MountUpdateCommitteeSettingsHandler(mux, h.UpdateCommitteeSettings)
	MountReadyzHandler(mux, h.Readyz)
	MountLivezHandler(mux, h.Livez)
	MountGenHTTPOpenapi3JSON(mux, h.GenHTTPOpenapi3JSON)
}

// Mount configures the mux to serve the committee-service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateCommitteeHandler configures the mux to serve the
// "committee-service" service "create-committee" endpoint.
func MountCreateCommitteeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/committees", f)
}

// NewCreateCommitteeHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-service" service "create-committee"
// endpoint.
func NewCreateCommitteeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCommitteeRequest(mux, decoder)
		encodeResponse = EncodeCreateCommitteeResponse(encoder)
		encodeError    = EncodeCreateCommitteeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-committee")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetCommitteeBaseHandler configures the mux to serve the
// "committee-service" service "get-committee-base" endpoint.
func MountGetCommitteeBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/committees/{uid}", f)
}

// NewGetCommitteeBaseHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-service" service "get-committee-base"
// endpoint.
func NewGetCommitteeBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCommitteeBaseRequest(mux, decoder)
		encodeResponse = EncodeGetCommitteeBaseResponse(encoder)
		encodeError    = EncodeGetCommitteeBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-committee-base")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateCommitteeBaseHandler configures the mux to serve the
// "committee-service" service "update-committee-base" endpoint.
func MountUpdateCommitteeBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/committees/{uid}", f)
}

// NewUpdateCommitteeBaseHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-service" service "update-committee-base"
// endpoint.
func NewUpdateCommitteeBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCommitteeBaseRequest(mux, decoder)
		encodeResponse = EncodeUpdateCommitteeBaseResponse(encoder)
		encodeError    = EncodeUpdateCommitteeBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-committee-base")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteCommitteeHandler configures the mux to serve the
// "committee-service" service "delete-committee" endpoint.
func MountDeleteCommitteeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/committees/{uid}", f)
}

// NewDeleteCommitteeHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-service" service "delete-committee"
// endpoint.
func NewDeleteCommitteeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCommitteeRequest(mux, decoder)
		encodeResponse = EncodeDeleteCommitteeResponse(encoder)
		encodeError    = EncodeDeleteCommitteeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-committee")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetCommitteeSettingsHandler configures the mux to serve the
// "committee-service" service "get-committee-settings" endpoint.
func MountGetCommitteeSettingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/committees/{uid}/settings", f)
}

// NewGetCommitteeSettingsHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-service" service "get-committee-settings"
// endpoint.
func NewGetCommitteeSettingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCommitteeSettingsRequest(mux, decoder)
		encodeResponse = EncodeGetCommitteeSettingsResponse(encoder)
		encodeError    = EncodeGetCommitteeSettingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-committee-settings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateCommitteeSettingsHandler configures the mux to serve the
// "committee-service" service "update-committee-settings" endpoint.
func MountUpdateCommitteeSettingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/committees/{uid}/settings", f)
}

// NewUpdateCommitteeSettingsHandler creates a HTTP handler which loads the
// HTTP request and calls the "committee-service" service
// "update-committee-settings" endpoint.
func NewUpdateCommitteeSettingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCommitteeSettingsRequest(mux, decoder)
		encodeResponse = EncodeUpdateCommitteeSettingsResponse(encoder)
		encodeError    = EncodeUpdateCommitteeSettingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-committee-settings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountReadyzHandler configures the mux to serve the "committee-service"
// service "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "committee-service" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountLivezHandler configures the mux to serve the "committee-service"
// service "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "committee-service" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	case "/openapi.json":
		name = "/openapi3.json"
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
