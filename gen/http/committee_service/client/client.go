// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service client HTTP transport
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the committee-service service endpoint HTTP clients.
type Client struct {
	// CreateCommittee Doer is the HTTP client used to make requests to the
	// create-committee endpoint.
	CreateCommitteeDoer goahttp.Doer

	// GetCommitteeBase Doer is the HTTP client used to make requests to the
	// get-committee-base endpoint.
	GetCommitteeBaseDoer goahttp.Doer

	// UpdateCommitteeBase Doer is the HTTP client used to make requests to the
	// update-committee-base endpoint.
	UpdateCommitteeBaseDoer goahttp.Doer

	// DeleteCommittee Doer is the HTTP client used to make requests to the
	// delete-committee endpoint.
	DeleteCommitteeDoer goahttp.Doer

	// GetCommitteeSettings Doer is the HTTP client used to make requests to the
	// get-committee-settings endpoint.
	GetCommitteeSettingsDoer goahttp.Doer

	// UpdateCommitteeSettings Doer is the HTTP client used to make requests to the
	// update-committee-settings endpoint.
	UpdateCommitteeSettingsDoer goahttp.Doer

	// Readyz Doer is the HTTP client used to make requests to the readyz endpoint.
	ReadyzDoer goahttp.Doer

	// Livez Doer is the HTTP client used to make requests to the livez endpoint.
	LivezDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the committee-service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateCommitteeDoer:         doer,
		GetCommitteeBaseDoer:        doer,
		UpdateCommitteeBaseDoer:     doer,
		DeleteCommitteeDoer:         doer,
		GetCommitteeSettingsDoer:    doer,
		UpdateCommitteeSettingsDoer: doer,
		ReadyzDoer:                  doer,
		LivezDoer:                   doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// CreateCommittee returns an endpoint that makes HTTP requests to the
// committee-service service create-committee server.
func (c *Client) CreateCommittee() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCommitteeRequest(c.encoder)
		decodeResponse = DecodeCreateCommitteeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCommitteeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCommitteeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "create-committee", err)
		}
		return decodeResponse(resp)
	}
}

// GetCommitteeBase returns an endpoint that makes HTTP requests to the
// committee-service service get-committee-base server.
func (c *Client) GetCommitteeBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCommitteeBaseRequest(c.encoder)
		decodeResponse = DecodeGetCommitteeBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCommitteeBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCommitteeBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "get-committee-base", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCommitteeBase returns an endpoint that makes HTTP requests to the
// committee-service service update-committee-base server.
func (c *Client) UpdateCommitteeBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCommitteeBaseRequest(c.encoder)
		decodeResponse = DecodeUpdateCommitteeBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateCommitteeBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCommitteeBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "update-committee-base", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCommittee returns an endpoint that makes HTTP requests to the
// committee-service service delete-committee server.
func (c *Client) DeleteCommittee() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteCommitteeRequest(c.encoder)
		decodeResponse = DecodeDeleteCommitteeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteCommitteeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCommitteeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "delete-committee", err)
		}
		return decodeResponse(resp)
	}
}

// GetCommitteeSettings returns an endpoint that makes HTTP requests to the
// committee-service service get-committee-settings server.
func (c *Client) GetCommitteeSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCommitteeSettingsRequest(c.encoder)
		decodeResponse = DecodeGetCommitteeSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCommitteeSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCommitteeSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "get-committee-settings", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCommitteeSettings returns an endpoint that makes HTTP requests to the
// committee-service service update-committee-settings server.
func (c *Client) UpdateCommitteeSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCommitteeSettingsRequest(c.encoder)
		decodeResponse = DecodeUpdateCommitteeSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateCommitteeSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCommitteeSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "update-committee-settings", err)
		}
		return decodeResponse(resp)
	}
}

// Readyz returns an endpoint that makes HTTP requests to the committee-service
// service readyz server.
func (c *Client) Readyz() goa.Endpoint {
	var (
		decodeResponse = DecodeReadyzResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadyzRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadyzDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "readyz", err)
		}
		return decodeResponse(resp)
	}
}

// Livez returns an endpoint that makes HTTP requests to the committee-service
// service livez server.
func (c *Client) Livez() goa.Endpoint {
	var (
		decodeResponse = DecodeLivezResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLivezRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LivezDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-service", "livez", err)
		}
		return decodeResponse(resp)
	}
}
