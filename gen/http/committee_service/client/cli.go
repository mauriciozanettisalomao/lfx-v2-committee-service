// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateCommitteePayload builds the payload for the committee-service
// create-committee endpoint from CLI flags.
func BuildCreateCommitteePayload(committeeServiceCreateCommitteeBody string, committeeServiceCreateCommitteeVersion string, committeeServiceCreateCommitteeBearerToken string) (*committeeservice.CreateCommitteePayload, error) {
	var err error
	var body CreateCommitteeRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceCreateCommitteeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"business_email_required\": false,\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"display_name\": \"TSC Committee Calendar\",\n      \"enable_voting\": true,\n      \"last_reviewed_at\": \"2023-05-10T09:15:00Z\",\n      \"last_reviewed_by\": \"user_id_12345\",\n      \"name\": \"Technical Steering Committee\",\n      \"parent_uid\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"requires_review\": true,\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if body.ProjectUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.DisplayName != nil {
			if utf8.RuneCountInString(*body.DisplayName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
			}
		}
		if body.ParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
		}
		if body.LastReviewedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceCreateCommitteeVersion != "" {
			version = &committeeServiceCreateCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceCreateCommitteeBearerToken != "" {
			bearerToken = &committeeServiceCreateCommitteeBearerToken
		}
	}
	v := &committeeservice.CreateCommitteePayload{
		ProjectUID:            body.ProjectUID,
		Name:                  body.Name,
		Category:              body.Category,
		Description:           body.Description,
		Website:               body.Website,
		EnableVoting:          body.EnableVoting,
		SsoGroupEnabled:       body.SsoGroupEnabled,
		RequiresReview:        body.RequiresReview,
		Public:                body.Public,
		DisplayName:           body.DisplayName,
		ParentUID:             body.ParentUID,
		BusinessEmailRequired: body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.RequiresReview == zero {
			v.RequiresReview = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	{
		var zero bool
		if v.BusinessEmailRequired == zero {
			v.BusinessEmailRequired = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetCommitteeBasePayload builds the payload for the committee-service
// get-committee-base endpoint from CLI flags.
func BuildGetCommitteeBasePayload(committeeServiceGetCommitteeBaseUID string, committeeServiceGetCommitteeBaseVersion string, committeeServiceGetCommitteeBaseBearerToken string) (*committeeservice.GetCommitteeBasePayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceGetCommitteeBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceGetCommitteeBaseVersion != "" {
			version = &committeeServiceGetCommitteeBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceGetCommitteeBaseBearerToken != "" {
			bearerToken = &committeeServiceGetCommitteeBaseBearerToken
		}
	}
	v := &committeeservice.GetCommitteeBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteeBasePayload builds the payload for the committee-service
// update-committee-base endpoint from CLI flags.
func BuildUpdateCommitteeBasePayload(committeeServiceUpdateCommitteeBaseBody string, committeeServiceUpdateCommitteeBaseUID string, committeeServiceUpdateCommitteeBaseVersion string, committeeServiceUpdateCommitteeBaseBearerToken string, committeeServiceUpdateCommitteeBaseEtag string) (*committeeservice.UpdateCommitteeBasePayload, error) {
	var err error
	var body UpdateCommitteeBaseRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceUpdateCommitteeBaseBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"display_name\": \"TSC Committee Calendar\",\n      \"enable_voting\": true,\n      \"name\": \"Technical Steering Committee\",\n      \"parent_uid\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"requires_review\": true,\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\"\n   }'")
		}
		if body.ProjectUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.DisplayName != nil {
			if utf8.RuneCountInString(*body.DisplayName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
			}
		}
		if body.ParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceUpdateCommitteeBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceUpdateCommitteeBaseVersion != "" {
			version = &committeeServiceUpdateCommitteeBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceUpdateCommitteeBaseBearerToken != "" {
			bearerToken = &committeeServiceUpdateCommitteeBaseBearerToken
		}
	}
	var etag *string
	{
		if committeeServiceUpdateCommitteeBaseEtag != "" {
			etag = &committeeServiceUpdateCommitteeBaseEtag
		}
	}
	v := &committeeservice.UpdateCommitteeBasePayload{
		ProjectUID:      body.ProjectUID,
		Name:            body.Name,
		Category:        body.Category,
		Description:     body.Description,
		Website:         body.Website,
		EnableVoting:    body.EnableVoting,
		SsoGroupEnabled: body.SsoGroupEnabled,
		RequiresReview:  body.RequiresReview,
		Public:          body.Public,
		DisplayName:     body.DisplayName,
		ParentUID:       body.ParentUID,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.RequiresReview == zero {
			v.RequiresReview = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteCommitteePayload builds the payload for the committee-service
// delete-committee endpoint from CLI flags.
func BuildDeleteCommitteePayload(committeeServiceDeleteCommitteeUID string, committeeServiceDeleteCommitteeVersion string, committeeServiceDeleteCommitteeBearerToken string, committeeServiceDeleteCommitteeEtag string) (*committeeservice.DeleteCommitteePayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceDeleteCommitteeUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceDeleteCommitteeVersion != "" {
			version = &committeeServiceDeleteCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceDeleteCommitteeBearerToken != "" {
			bearerToken = &committeeServiceDeleteCommitteeBearerToken
		}
	}
	var etag *string
	{
		if committeeServiceDeleteCommitteeEtag != "" {
			etag = &committeeServiceDeleteCommitteeEtag
		}
	}
	v := &committeeservice.DeleteCommitteePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildGetCommitteeSettingsPayload builds the payload for the
// committee-service get-committee-settings endpoint from CLI flags.
func BuildGetCommitteeSettingsPayload(committeeServiceGetCommitteeSettingsUID string, committeeServiceGetCommitteeSettingsVersion string, committeeServiceGetCommitteeSettingsBearerToken string) (*committeeservice.GetCommitteeSettingsPayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceGetCommitteeSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceGetCommitteeSettingsVersion != "" {
			version = &committeeServiceGetCommitteeSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceGetCommitteeSettingsBearerToken != "" {
			bearerToken = &committeeServiceGetCommitteeSettingsBearerToken
		}
	}
	v := &committeeservice.GetCommitteeSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteeSettingsPayload builds the payload for the
// committee-service update-committee-settings endpoint from CLI flags.
func BuildUpdateCommitteeSettingsPayload(committeeServiceUpdateCommitteeSettingsBody string, committeeServiceUpdateCommitteeSettingsUID string, committeeServiceUpdateCommitteeSettingsVersion string, committeeServiceUpdateCommitteeSettingsBearerToken string, committeeServiceUpdateCommitteeSettingsEtag string) (*committeeservice.UpdateCommitteeSettingsPayload, error) {
	var err error
	var body UpdateCommitteeSettingsRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceUpdateCommitteeSettingsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"business_email_required\": false,\n      \"last_reviewed_at\": \"2023-05-10T09:15:00Z\",\n      \"last_reviewed_by\": \"user_id_12345\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if body.LastReviewedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceUpdateCommitteeSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceUpdateCommitteeSettingsVersion != "" {
			version = &committeeServiceUpdateCommitteeSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceUpdateCommitteeSettingsBearerToken != "" {
			bearerToken = &committeeServiceUpdateCommitteeSettingsBearerToken
		}
	}
	var etag *string
	{
		if committeeServiceUpdateCommitteeSettingsEtag != "" {
			etag = &committeeServiceUpdateCommitteeSettingsEtag
		}
	}
	v := &committeeservice.UpdateCommitteeSettingsPayload{
		BusinessEmailRequired: body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
