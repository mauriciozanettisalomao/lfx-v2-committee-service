// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/lfx-v2-committee-service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	committeec "github.com/linuxfoundation/lfx-v2-committee-service/gen/http/committee/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `committee (create-committee|get-committee|update-committee|delete-committee|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` committee create-committee --body '{
      "business_email_required": false,
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "enable_voting": true,
      "is_audit_enabled": false,
      "name": "Technical Steering Committee",
      "parent_committee_id": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "public": true,
      "public_name": "TSC Committee Calendar",
      "sso_group_enabled": true,
      "status": "active",
      "website": "https://committee.example.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		committeeFlags = flag.NewFlagSet("committee", flag.ContinueOnError)

		committeeCreateCommitteeFlags           = flag.NewFlagSet("create-committee", flag.ExitOnError)
		committeeCreateCommitteeBodyFlag        = committeeCreateCommitteeFlags.String("body", "REQUIRED", "")
		committeeCreateCommitteeVersionFlag     = committeeCreateCommitteeFlags.String("version", "", "")
		committeeCreateCommitteeBearerTokenFlag = committeeCreateCommitteeFlags.String("bearer-token", "", "")

		committeeGetCommitteeFlags           = flag.NewFlagSet("get-committee", flag.ExitOnError)
		committeeGetCommitteeIDFlag          = committeeGetCommitteeFlags.String("id", "REQUIRED", "Committee ID")
		committeeGetCommitteeVersionFlag     = committeeGetCommitteeFlags.String("version", "", "")
		committeeGetCommitteeBearerTokenFlag = committeeGetCommitteeFlags.String("bearer-token", "", "")

		committeeUpdateCommitteeFlags           = flag.NewFlagSet("update-committee", flag.ExitOnError)
		committeeUpdateCommitteeBodyFlag        = committeeUpdateCommitteeFlags.String("body", "REQUIRED", "")
		committeeUpdateCommitteeIDFlag          = committeeUpdateCommitteeFlags.String("id", "REQUIRED", "Committee ID")
		committeeUpdateCommitteeVersionFlag     = committeeUpdateCommitteeFlags.String("version", "", "")
		committeeUpdateCommitteeBearerTokenFlag = committeeUpdateCommitteeFlags.String("bearer-token", "", "")
		committeeUpdateCommitteeEtagFlag        = committeeUpdateCommitteeFlags.String("etag", "", "")

		committeeDeleteCommitteeFlags           = flag.NewFlagSet("delete-committee", flag.ExitOnError)
		committeeDeleteCommitteeIDFlag          = committeeDeleteCommitteeFlags.String("id", "REQUIRED", "Committee ID")
		committeeDeleteCommitteeVersionFlag     = committeeDeleteCommitteeFlags.String("version", "", "")
		committeeDeleteCommitteeBearerTokenFlag = committeeDeleteCommitteeFlags.String("bearer-token", "", "")
		committeeDeleteCommitteeEtagFlag        = committeeDeleteCommitteeFlags.String("etag", "", "")

		committeeReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		committeeLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	committeeFlags.Usage = committeeUsage
	committeeCreateCommitteeFlags.Usage = committeeCreateCommitteeUsage
	committeeGetCommitteeFlags.Usage = committeeGetCommitteeUsage
	committeeUpdateCommitteeFlags.Usage = committeeUpdateCommitteeUsage
	committeeDeleteCommitteeFlags.Usage = committeeDeleteCommitteeUsage
	committeeReadyzFlags.Usage = committeeReadyzUsage
	committeeLivezFlags.Usage = committeeLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "committee":
			svcf = committeeFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "committee":
			switch epn {
			case "create-committee":
				epf = committeeCreateCommitteeFlags

			case "get-committee":
				epf = committeeGetCommitteeFlags

			case "update-committee":
				epf = committeeUpdateCommitteeFlags

			case "delete-committee":
				epf = committeeDeleteCommitteeFlags

			case "readyz":
				epf = committeeReadyzFlags

			case "livez":
				epf = committeeLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "committee":
			c := committeec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-committee":
				endpoint = c.CreateCommittee()
				data, err = committeec.BuildCreateCommitteePayload(*committeeCreateCommitteeBodyFlag, *committeeCreateCommitteeVersionFlag, *committeeCreateCommitteeBearerTokenFlag)
			case "get-committee":
				endpoint = c.GetCommittee()
				data, err = committeec.BuildGetCommitteePayload(*committeeGetCommitteeIDFlag, *committeeGetCommitteeVersionFlag, *committeeGetCommitteeBearerTokenFlag)
			case "update-committee":
				endpoint = c.UpdateCommittee()
				data, err = committeec.BuildUpdateCommitteePayload(*committeeUpdateCommitteeBodyFlag, *committeeUpdateCommitteeIDFlag, *committeeUpdateCommitteeVersionFlag, *committeeUpdateCommitteeBearerTokenFlag, *committeeUpdateCommitteeEtagFlag)
			case "delete-committee":
				endpoint = c.DeleteCommittee()
				data, err = committeec.BuildDeleteCommitteePayload(*committeeDeleteCommitteeIDFlag, *committeeDeleteCommitteeVersionFlag, *committeeDeleteCommitteeBearerTokenFlag, *committeeDeleteCommitteeEtagFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// committeeUsage displays the usage of the committee command and its
// subcommands.
func committeeUsage() {
	fmt.Fprintf(os.Stderr, `Committee management service
Usage:
    %[1]s [globalflags] committee COMMAND [flags]

COMMAND:
    create-committee: Create Committee
    get-committee: Get Committee
    update-committee: Update Committee
    delete-committee: Delete Committee
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s committee COMMAND --help
`, os.Args[0])
}
func committeeCreateCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee create-committee -body JSON -version STRING -bearer-token STRING

Create Committee
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee create-committee --body '{
      "business_email_required": false,
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "enable_voting": true,
      "is_audit_enabled": false,
      "name": "Technical Steering Committee",
      "parent_committee_id": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "public": true,
      "public_name": "TSC Committee Calendar",
      "sso_group_enabled": true,
      "status": "active",
      "website": "https://committee.example.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeGetCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee get-committee -id STRING -version STRING -bearer-token STRING

Get Committee
    -id STRING: Committee ID
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee get-committee --id "4132e886-3936-4ce3-84d2-f690a3b77be0" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeUpdateCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee update-committee -body JSON -id STRING -version STRING -bearer-token STRING -etag STRING

Update Committee
    -body JSON: 
    -id STRING: Committee ID
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 

Example:
    %[1]s committee update-committee --body '{
      "business_email_required": false,
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "enable_voting": true,
      "is_audit_enabled": false,
      "name": "Technical Steering Committee",
      "parent_committee_id": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "project_id": "a0956000001FwZVAA0",
      "public": true,
      "public_name": "TSC Committee Calendar",
      "sso_group_enabled": true,
      "website": "https://committee.example.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --id "ac6a9e25-9d87-4d16-a0fc-680e85ce9908" --version "1" --bearer-token "eyJhbGci..." --etag "123"
`, os.Args[0])
}

func committeeDeleteCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee delete-committee -id STRING -version STRING -bearer-token STRING -etag STRING

Delete Committee
    -id STRING: Committee ID
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 

Example:
    %[1]s committee delete-committee --id "3dbd821c-5105-4267-a404-8a761c693e18" --version "1" --bearer-token "eyJhbGci..." --etag "123"
`, os.Args[0])
}

func committeeReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s committee readyz
`, os.Args[0])
}

func committeeLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee livez

Check if the service is alive.

Example:
    %[1]s committee livez
`, os.Args[0])
}
